#include "text/bitmap_font.hpp"

namespace text {

/*------------------------------------------------
  A small set of glyphs for: SPACE, '-', A,C,E,G,
  I,M,R,S,V (covers "RISC-V GAME").
------------------------------------------------*/
static constexpr std::array<std::pair<char,Glyph>, 32> glyphTable{{
    // Space
    {' ', {8,8,{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }}},

    // Punctuation
    {'-',{8,8,{ 0,0,0,0x7E,0,0,0,0 }}},
    {'.', {8,8,{ 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00 }}},
    {',', {8,8,{ 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30 }}},
    {'?', {8,8,{ 0x3C,0x66,0x0C,0x18,0x18,0x00,0x18,0x00 }}},
    {'!', {8,8,{ 0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00 }}},

    // Alphabet A–Z
    {'A',{8,8,{ 0x18,0x3C,0x66,0x66,0x7E,0x66,0x66,0x00 }}},
    {'B',{8,8,{ 0x7C,0x66,0x66,0x7C,0x66,0x66,0x7C,0x00 }}},
    {'C',{8,8,{ 0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00 }}},
    {'D',{8,8,{ 0x78,0x6C,0x66,0x66,0x66,0x6C,0x78,0x00 }}},
    {'E',{8,8,{ 0x7E,0x60,0x60,0x7C,0x60,0x60,0x7E,0x00 }}},
    {'F',{8,8,{ 0x7E,0x60,0x60,0x7C,0x60,0x60,0x60,0x00 }}},
    {'G',{8,8,{ 0x3C,0x66,0x60,0x6E,0x66,0x66,0x3C,0x00 }}},
    {'H',{8,8,{ 0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00 }}},
    {'I',{8,8,{ 0x3C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00 }}},
    {'J',{8,8,{ 0x1E,0x0C,0x0C,0x0C,0x0C,0x6C,0x38,0x00 }}},
    {'K',{8,8,{ 0x66,0x6C,0x78,0x70,0x78,0x6C,0x66,0x00 }}},
    {'L',{8,8,{ 0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x00 }}},
    {'M',{8,8,{ 0x63,0x77,0x7F,0x6B,0x63,0x63,0x63,0x00 }}},
    {'N',{8,8,{ 0x66,0x76,0x7E,0x6E,0x66,0x66,0x66,0x00 }}},
    {'O',{8,8,{ 0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00 }}},
    {'P',{8,8,{ 0x7C,0x66,0x66,0x7C,0x60,0x60,0x60,0x00 }}},
    {'Q',{8,8,{ 0x3C,0x66,0x66,0x66,0x6E,0x3C,0x0E,0x00 }}},
    {'R',{8,8,{ 0x7C,0x66,0x66,0x7C,0x78,0x6C,0x66,0x00 }}},
    {'S',{8,8,{ 0x3C,0x66,0x60,0x3C,0x06,0x66,0x3C,0x00 }}},
    {'T',{8,8,{ 0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00 }}},
    {'U',{8,8,{ 0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00 }}},
    {'V',{8,8,{ 0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00 }}},
    {'W',{8,8,{ 0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00 }}},
    {'X',{8,8,{ 0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00 }}},
    {'Y',{8,8,{ 0x66,0x66,0x3C,0x18,0x18,0x18,0x3C,0x00 }}},
    {'Z',{8,8,{ 0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x00 }}}
}};

/* blank glyph for any unsupported character */
static constexpr Glyph emptyGlyph{8,8,{ 0,0,0,0,0,0,0,0 }};

constexpr const Glyph& BitmapFont::getGlyph(char c) noexcept {
    for (auto& [key,g] : glyphTable) {
        if (key == c) return g;
    }
    return emptyGlyph;
}

void BitmapFont::drawText(std::uint8_t*    fb,
                          std::size_t      fbWidth,
                          std::size_t      fbHeight,
                          int              x,
                          int              y,
                          std::string_view text,
                          std::uint8_t     color) noexcept
{
    int cursorX = x;
    for (char c : text) {
        const Glyph& g = getGlyph(c);
        // draw 8×8 block
        for (int row = 0; row < g.height; ++row) {
            std::uint8_t bits = g.bitmap[static_cast<std::uint8_t>(row)];
            for (int col = 0; col < g.width; ++col) {
                if ((bits >> (7 - col)) & 1) {
                    int px = cursorX + col;
                    int py = y + row;
                    if (px >= 0 && px < int(fbWidth) &&
                        py >= 0 && py < int(fbHeight))
                    {
                        fb[static_cast<std::uint8_t>(py) * fbWidth + static_cast<std::uint8_t>(px)] = color;
                    }
                }
            }
        }
        cursorX += charWidth;
    }
}

} // namespace text
